[{"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\index.tsx":"1","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\AlgModelPage.tsx":"2","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\InterfaceInfoPage.tsx":"3","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\EditableTable.tsx":"4","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\EditableTableTwo.tsx":"5","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\AlgInfoPage.tsx":"6"},{"size":1646,"mtime":1606303937531,"results":"7","hashOfConfig":"8"},{"size":7299,"mtime":1606455611261,"results":"9","hashOfConfig":"8"},{"size":3558,"mtime":1606297610154,"results":"10","hashOfConfig":"8"},{"size":7527,"mtime":1606302369885,"results":"11","hashOfConfig":"8"},{"size":6372,"mtime":1606458274913,"results":"12","hashOfConfig":"8"},{"size":6589,"mtime":1606455917628,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"15ofebx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\index.tsx",[],["30","31"],"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\AlgModelPage.tsx",[],"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\InterfaceInfoPage.tsx",[],["32","33"],"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\EditableTable.tsx",["34","35"],"import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Table, Input, Form, Select } from 'antd';\r\nimport { MinusCircleOutlined, PlusCircleOutlined } from '@ant-design/icons'\r\n\r\nconst EditableContext = React.createContext<any>('');\r\nconst { Option } = Select;\r\ninterface Item {\r\n    key: string;\r\n    paramName: string;\r\n    paramType: React.Component;\r\n    info: string;\r\n    note: string;\r\n}\r\n\r\ninterface EditableRowProps {\r\n    index: number;\r\n}\r\n\r\nconst EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\ninterface EditableCellProps {\r\n    title: React.ReactNode;\r\n    editable: boolean;\r\n    children: React.ReactNode;\r\n    dataIndex: string;\r\n    record: any;\r\n    handleSave: (record: Item) => void;\r\n}\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef: React.MutableRefObject<any> = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (e: any) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\ninterface State {\r\n    dataSource: any[];\r\n    count: number;\r\n}\r\nexport default class EditableTable extends React.Component<any, State> {\r\n    column = [\r\n        {\r\n            title: '参数名',\r\n            dataIndex: 'paramName',\r\n            width: '20%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: '参数类型',\r\n            width: '20%',\r\n            dataIndex: 'paramType',\r\n        },\r\n        {\r\n            title: '说明',\r\n            dataIndex: 'info',\r\n            width: '30%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: '备注',\r\n            dataIndex: 'note',\r\n            width: '15%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: '操作',\r\n            dataIndex: 'operation',\r\n            width: '15%',\r\n\r\n            render: (text: any, record: Item) =>\r\n                <div>\r\n                    <a onClick={this.handleAdd} style={{ marginBottom: 16 }}><PlusCircleOutlined /></a>\r\n                    <a onClick={() => this.handleDelete(record.key)} style={{ marginBottom: 16, paddingLeft: 20 }}><MinusCircleOutlined /></a>\r\n                </div>\r\n        },\r\n\r\n    ];\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dataSource: [\r\n                {\r\n                    key: '0',\r\n                    paramName: '参数名',\r\n                    paramType: <Select defaultValue='string'>\r\n                        <Option value='string'>string</Option>\r\n                        <Option value='number'>number</Option>\r\n                        <Option value='boolean'>boolean</Option>\r\n                        <Option value='object'>object</Option>\r\n                        <Option value='array'>array</Option>\r\n                    </Select>,\r\n                    info: '说明',\r\n                    note: '0',\r\n                },\r\n            ],\r\n            count: 1,\r\n        };\r\n    }\r\n\r\n    handleDelete = (key: string) => {\r\n        const dataSource = [...this.state.dataSource];\r\n        if (dataSource.length > 1) {\r\n            this.setState({\r\n                dataSource: dataSource.filter((item) => item.key !== key),\r\n            });\r\n        }\r\n    };\r\n    handleAdd = () => {\r\n        const { count, dataSource } = this.state;\r\n        const newData = {\r\n            key: count,\r\n            paramName: `参数名 ${count}`,\r\n            paramType: <Select defaultValue='string'>\r\n                <Option value='string'>string</Option>\r\n                <Option value='number'>number</Option>\r\n                <Option value='boolean'>boolean</Option>\r\n                <Option value='object'>object</Option>\r\n                <Option value='array'>array</Option>\r\n            </Select>,\r\n            info: `说明 ${count}`,\r\n            note: `${count}`,\r\n        };\r\n        this.setState({\r\n            dataSource: [...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n    };\r\n    handleSave = (row: Item) => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        this.setState({\r\n            dataSource: newData,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n        const components = {\r\n            body: {\r\n                row: EditableRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.column.map((col) => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n                onCell: (record: Item) => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <div className=\"my-div-right\">\r\n                {/* <Button\r\n                    onClick={this.handleAdd}\r\n                    type=\"primary\"\r\n                    style={{\r\n                        marginBottom: 16,\r\n                    }}\r\n                >\r\n                    添加项\r\n                </Button> */}\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    style={{ width: 800 }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\EditableTableTwo.tsx",["36","37"],"D:\\react_ts\\react-ts-demo\\react-ts-demo2\\src\\AlgInfoPage.tsx",["38"],"import React from 'react'\r\nimport {Button, Input, Select,Modal} from 'antd'\r\nimport {PlusCircleOutlined, RightOutlined} from '@ant-design/icons'\r\n\r\nconst {TextArea} = Input;\r\nconst {Option} = Select;\r\n\r\nclass PlatformView extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"my-div\" style={{marginLeft: 120}}>\r\n                <div style={{marginBottom: 20}}>\r\n                    <Select placeholder=\"请选择园区\"></Select>\r\n                    <RightOutlined style={{paddingLeft: 20}}/>\r\n                    <Select placeholder=\"请选择业务域\" style={{paddingLeft: 20}}></Select>\r\n                    <RightOutlined style={{paddingLeft: 20}}/>\r\n                    <Select placeholder=\"请选择能源系统\" style={{paddingLeft: 20}}></Select>\r\n                    <RightOutlined style={{paddingLeft: 20}}/>\r\n                </div>\r\n                <div style={{marginBottom: 20}}>\r\n                    <Select placeholder=\"请选择设备类型\"></Select>\r\n                    <RightOutlined style={{paddingLeft: 20}}/>\r\n                    <Select placeholder=\"请选择设备\" style={{paddingLeft: 20}}></Select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass DefinedView extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"my-div\" style={{marginLeft: 120}}>\r\n                <TextArea placeholder=\"请输入自定义场景及目标描述\" rows={5}></TextArea>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default class AlgInfoPage extends React.Component {\r\n    state = {\r\n        current: \"\",\r\n        modalVisible:false\r\n    };\r\n    setModalVisible(modalVisible:boolean) {\r\n        this.setState({ modalVisible });\r\n    }\r\n    handleClick = (e: any) => {\r\n        this.setState({\r\n            current: e\r\n        })\r\n    };\r\n    render() {\r\n        const {current} = this.state;\r\n        let sceneView = <DefinedView/>;\r\n        if (current === \"自定义\") {\r\n            sceneView = <DefinedView/>\r\n        } else if (current === \"平台内\") {\r\n            sceneView = <PlatformView/>\r\n        }\r\n        return (\r\n            <div className=\"main-div\">\r\n                {/* 第一块是算法概述 */}\r\n                < div className=\"my-div\">\r\n                    <div style={{display: \"inline-block\"}}>\r\n                        <p><span>*</span>算法名称:</p>\r\n                    </div>\r\n                    <div className=\"my-div-right\" style={{paddingLeft: 60}}>\r\n                        <Input placeholder=\"请输入算法名称\" maxLength={50}/>\r\n                    </div>\r\n                </div>\r\n                {/* 第二块是算法标签 */}\r\n                < div className=\"my-div\">\r\n                    <div style={{display: \"inline-block\"}}>\r\n                        <p><span>*</span>算法标签:</p>\r\n                    </div>\r\n                    <div className=\"icons-list my-div-right\" style={{paddingLeft: 60}}>\r\n                        <Button type=\"primary\" onClick={()=>this.setModalVisible(true)}> <PlusCircleOutlined/> </Button>\r\n                        <Modal\r\n                            title=\"选择标签\"\r\n                            centered\r\n                            width={800}\r\n                            visible={this.state.modalVisible}\r\n                            onOk={() => this.setModalVisible(false)}\r\n                            onCancel={() => this.setModalVisible(false)}\r\n                            okText=\"确定\"\r\n                            cancelText=\"取消\"\r\n                        >\r\n                            <div>\r\n                                <Input placeholder=\"请输入标签关键词\"/>\r\n                                <a style={{ paddingLeft:20}}>新建标签</a>\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"my-p-label\">已选标签</p>\r\n                            </div>\r\n                            <p className=\"my-p-label\">推荐标签</p>\r\n                            <div style={{height:300,overflow:\"auto\"}}>\r\n                                <div style={{overflow:\"auto\"}}>\r\n                                    <p>标签1</p>\r\n                                    <p>标签2</p>\r\n                                    <p>标签3</p>\r\n                                    <p>标签4</p>\r\n                                </div>\r\n                            </div>\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n                {/* 第三块是算法功能 */}\r\n                < div className=\"my-div\">\r\n                    <div style={{display: \"inline-block\", verticalAlign: \"top\"}}>\r\n                        <p><span>*</span>算法功能:</p>\r\n                    </div>\r\n                    <div className=\"my-div-right\" style={{paddingLeft: 60}}>\r\n                        <TextArea placeholder=\"请输入算法功能\" rows={5}></TextArea>\r\n                    </div>\r\n                </div>\r\n                {/* 第四块是适用场景及目标 */}\r\n                < div className=\"my-div\">\r\n                    <div style={{display: \"inline-block\"}}>\r\n                        <p>适用场景及目标:</p>\r\n                    </div>\r\n                    <div className=\"my-div-right\">\r\n                        <Select onChange={this.handleClick} id=\"scene\" defaultValue=\"自定义场景\" style={{width: 200}}>\r\n                            <Option value=\"自定义\" key=\"1\">自定义场景</Option>\r\n                            <Option value=\"平台内\" key=\"2\">平台内项目</Option>\r\n                        </Select>\r\n                    </div>\r\n                    {sceneView}\r\n                    {/* <DefinedView />\r\n                    <PlatformView /> */}\r\n                </div>\r\n                {/* 第五块是原理及参数介绍 */}\r\n                < div className=\"my-div\">\r\n                    <div style={{display: \"inline-block\", verticalAlign: \"top\"}}>\r\n                        <p>原理及参数介绍:</p>\r\n                    </div>\r\n                    <div className=\"my-div-right\">\r\n                        <TextArea placeholder=\"请输入原理及参数介绍\" rows={5}></TextArea>\r\n                    </div>\r\n                </div>\r\n                {/* 最后一块是取消和保存当前 */}\r\n                < div style={{textAlign: \"center\"}}>\r\n                    <Button>取消</Button>\r\n                    <Button type=\"primary\">保存当前</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":141,"column":21,"nodeType":"47","endLine":141,"endColumn":78},{"ruleId":"45","severity":1,"message":"46","line":142,"column":21,"nodeType":"47","endLine":142,"endColumn":116},{"ruleId":"45","severity":1,"message":"46","line":127,"column":21,"nodeType":"47","endLine":127,"endColumn":78},{"ruleId":"45","severity":1,"message":"46","line":128,"column":21,"nodeType":"47","endLine":128,"endColumn":116},{"ruleId":"45","severity":1,"message":"46","line":91,"column":33,"nodeType":"47","endLine":91,"endColumn":62},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]